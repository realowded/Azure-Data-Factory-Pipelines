{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DeepakDataEngineering"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Copy_5_Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Mutiple Tables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray('Customer','Product','CustomerAddress','ProductDescription')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SQL_GENERIC_DS",
											"type": "DatasetReference",
											"parameters": {
												"schemaName": "salesLt",
												"tableName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "GENERIC_ADLS_CSV_DS",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Customer_Address')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SQL_GENERIC_DS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "salesLt",
									"tableName": "CustomerAddress"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "JSON_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Customer_To_Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_GENERIC_DS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "salesLt",
									"tableName": "Customer"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GENERIC_ADLS_CSV_DS",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "Customer"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Product_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Product_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JSON_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_Produxt_Description')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_GENERIC_DS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "salesLt",
									"tableName": "productDescription"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CSV_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get HighWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2023-03-23T00:00:00Z",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "HighWaterMark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LAst Update From DB",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get HighWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT MAX(MODIFIEDdATE) AS LastUpdatedTime FROM SALESLT.CUSTOMER",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LAst Update From DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from saleslt.customer where modifieddate > '@{activity('Get HighWaterMark').output.firstRow.prop_0}'and modifieddate <= '@{activity('LAst Update From DB').output.firstRow.LastUpdatedTime}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update HighwaterMart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select '@{activity('LAst Update From DB').output.firstRow.LastUpdatedTime}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Product_SQL_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "HighWaterMark",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-27T02:12:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingestion_SQLDB_CUSTOMER_JSON')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JSON_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product_To_Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_GENERIC_DS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "salesLt",
									"tableName": "Product"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GENERIC_ADLS_CSV_DS",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "product"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Q4_Assignment6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get HW_DATE",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select hw_date from HW_Table WHERE TableName ='Customer'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Customer_lastModifiedDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get HW_DATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select max(ModifiedDate) AS LastModifiedDate from saleslt.customer",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Customer_lastModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from saleslt.Customer WHERE modifieddate > '@{activity('Get HW_DATE').output.firstRow.HW_Date}' and modifieddate <= '@{activity('Get Customer_lastModifiedDate').output.firstRow.LastModifiedDate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_GENERIC_DS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "salesLt",
									"tableName": "Q4"
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select 'Customer' AS TableName, '@{activity('Get Customer_lastModifiedDate').output.firstRow.lastModifiedDate}' AS HW_DATE",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"TableName"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TableName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "TableName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "HW_DATE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "HW_Date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_GENERIC_DS",
								"type": "DatasetReference",
								"parameters": {
									"schemaName": "dbo",
									"tableName": "HW_Table"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-27T02:12:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_API_EXAMPLE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_DS",
								"type": "DatasetReference",
								"parameters": {
									"relativeURL": "mexico"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GENERIC_ADLS_CSV_DS",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "REST_OUTPUT"
								}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-16.eastus.logic.azure.com:443/workflows/337ef42c1aff437e86d3c5f51fb81b8c/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=JOfrZpl_s260LeGLEVSTavrYqlOPQxevudwtAytGa4o",
							"method": "POST",
							"headers": {},
							"body": {
								"PipelineName": "Rest_API_Example",
								"status": "True",
								"RecepientEmailID": "realowded@gmail.com"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T04:25:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sample_pipeline_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move data from SQL to ADLS",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerNumber",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "NameStyle",
											"type": "Boolean",
											"physicalType": "bit"
										},
										"sink": {
											"name": "NamePrefix",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MiddleName",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSV_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T05:33:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetCustomerID 100 200')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sales_Customer_CSV",
								"type": "DatasetReference"
							},
							"name": "CustomerFile"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "SQL_DB_LS",
								"type": "LinkedServiceReference"
							},
							"name": "EvenCustomerID"
						}
					],
					"transformations": [
						{
							"name": "DetEvenCustomerID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerFile",
						"CustomerFile filter(CustomerID%2==0) ~> DetEvenCustomerID",
						"DetEvenCustomerID sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'saleslt',",
						"     tableName: 'EvenCustomerID',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> EvenCustomerID"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinCustomerToCustomerAddress')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sale_CustomerAddress_CSV",
								"type": "DatasetReference"
							},
							"name": "CustomerAddress"
						},
						{
							"dataset": {
								"referenceName": "Sale_CustomerAddress_CSV",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerAndCustomerAddress",
								"type": "DatasetReference"
							},
							"name": "CustomerAndCustomerAddress"
						}
					],
					"transformations": [
						{
							"name": "JoinCustomerToCustomerAddress"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          AddressID as string,",
						"          AddressType as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          AddressID as string,",
						"          AddressType as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customer",
						"CustomerAddress, Customer join(CustomerAddress@CustomerID == Customer@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCustomerToCustomerAddress",
						"JoinCustomerToCustomerAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CustomerAndCustomerAddress"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProdcutCategory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductCsv",
								"type": "DatasetReference"
							},
							"name": "ProductCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductResult",
								"type": "DatasetReference"
							},
							"name": "ProductResultfolder"
						}
					],
					"transformations": [
						{
							"name": "GroupByProductCategory"
						},
						{
							"name": "NonBlueProduct"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as string,",
						"          ListPrice as string,",
						"          Size as string,",
						"          Weight as string,",
						"          ProductCategoryID as string,",
						"          ProductModelID as string,",
						"          SellStartDate as string,",
						"          SellEndDate as string,",
						"          DiscontinuedDate as string,",
						"          ThumbNailPhoto as string,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductCSV",
						"NonBlueProduct aggregate(groupBy(ProductCategoryID),",
						"     ListPrice = max(ListPrice)) ~> GroupByProductCategory",
						"ProductCSV filter(Color!='Blue') ~> NonBlueProduct",
						"lookup1 select(mapColumn(",
						"          ProductCategoryID = GroupByProductCategory@ProductCategoryID,",
						"          ListPrice = ProductCSV@ListPrice,",
						"          ListPriceMax = GroupByProductCategory@ListPrice,",
						"          Name,",
						"          ProductNumber,",
						"          Color,",
						"          StandardCost,",
						"          Size,",
						"          Weight,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          DiscontinuedDate,",
						"          ThumbNailPhoto,",
						"          ThumbnailPhotoFileName,",
						"          rowguid,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"GroupByProductCategory, ProductCSV lookup(GroupByProductCategory@ProductCategoryID == ProductCSV@ProductCategoryID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     desc(ProductCSV@ListPrice, true),",
						"     broadcast: 'auto')~> lookup1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['SingleProduct'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ProductResultfolder"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL and CSV to Parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SDQL_DB_DS",
								"type": "DatasetReference"
							},
							"name": "CutomerSQLDS"
						},
						{
							"dataset": {
								"referenceName": "Sale_CustomerAddress_CSV",
								"type": "DatasetReference"
							},
							"name": "CustomerAddressCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerInfoParquet",
								"type": "DatasetReference"
							},
							"name": "ParquetOutput"
						}
					],
					"transformations": [
						{
							"name": "JoinCutomerandCustomerAddresss"
						},
						{
							"name": "Ascending"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CutomerSQLDS",
						"source(output(",
						"          CustomerID as integer,",
						"          AddressID as string,",
						"          AddressType as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CustomerAddressCsv",
						"CutomerSQLDS, CustomerAddressCsv join(CutomerSQLDS@CustomerID == CustomerAddressCsv@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCutomerandCustomerAddresss",
						"filter1 sort(asc(CustomerID, true)) ~> Ascending",
						"JoinCutomerandCustomerAddresss select(mapColumn(",
						"          CustomerID = CutomerSQLDS@CustomerID,",
						"          NameStyle,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Suffix,",
						"          CompanyName,",
						"          SalesPerson,",
						"          EmailAddress,",
						"          Phone,",
						"          PasswordHash,",
						"          PasswordSalt,",
						"          Customerrowguid = CutomerSQLDS@rowguid,",
						"          CustomerModifiedDate = CutomerSQLDS@ModifiedDate,",
						"          AddressID,",
						"          AddressType,",
						"          Addressrowguid = CustomerAddressCsv@rowguid,",
						"          AddressModifiedDate = CustomerAddressCsv@ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(CustomerID<20000000) ~> filter1",
						"Ascending sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ParquetOutput"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "NewestFile",
								"type": "DatasetReference"
							},
							"name": "NewestFile"
						},
						{
							"dataset": {
								"referenceName": "DW_TABLE",
								"type": "DatasetReference"
							},
							"name": "DwTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DW_TABLE",
								"type": "DatasetReference"
							},
							"name": "DwTable0"
						},
						{
							"dataset": {
								"referenceName": "DW_TABLE",
								"type": "DatasetReference"
							},
							"name": "DwTableInsert"
						}
					],
					"transformations": [
						{
							"name": "OddCustID"
						},
						{
							"name": "select1"
						},
						{
							"name": "CheckIfExist"
						},
						{
							"name": "IfExist"
						},
						{
							"name": "select2"
						},
						{
							"name": "ActiveFlag"
						},
						{
							"name": "AllowInsert"
						},
						{
							"name": "ActiveFlag0"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> NewestFile",
						"source(output(",
						"          CID as integer,",
						"          Name as string,",
						"          MailID as integer,",
						"          Active_Flag as integer",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DwTable",
						"NewestFile filter(CustomerID%2!=0) ~> OddCustID",
						"DwTable select(mapColumn(",
						"          CID,",
						"          Db_Active_Flag = Active_Flag",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"OddCustID, select1 lookup(CustomerID == CID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> CheckIfExist",
						"CheckIfExist filter(!isNull(CID)) ~> IfExist",
						"IfExist select(mapColumn(",
						"          CustomerID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(Active_Flag = 0) ~> ActiveFlag",
						"ActiveFlag alterRow(updateIf(1==1)) ~> AllowInsert",
						"OddCustID derive(Active_Flag = 1) ~> ActiveFlag0",
						"AllowInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          MailID as integer,",
						"          Active_Flag as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CID = CustomerID,",
						"          Active_Flag",
						"     )) ~> DwTable0",
						"ActiveFlag0 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          MailID as integer,",
						"          Active_Flag as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CID = CustomerID,",
						"          Name = FirstName,",
						"          MailID = EmailAddress,",
						"          Active_Flag",
						"     )) ~> DwTableInsert"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Type3DS",
								"type": "DatasetReference"
							},
							"name": "Type3Data"
						},
						{
							"dataset": {
								"referenceName": "DWType3",
								"type": "DatasetReference"
							},
							"name": "DWType3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DWType3",
								"type": "DatasetReference"
							},
							"name": "UpdatePreviousName1"
						},
						{
							"dataset": {
								"referenceName": "DWType3",
								"type": "DatasetReference"
							},
							"name": "UpdatePreviousName0"
						},
						{
							"dataset": {
								"referenceName": "DWType3",
								"type": "DatasetReference"
							},
							"name": "UpdateCurrentName"
						},
						{
							"dataset": {
								"referenceName": "DWType3",
								"type": "DatasetReference"
							},
							"name": "InsertNewRecords"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "ExistingCustomer"
						},
						{
							"name": "SelectCurrentName"
						},
						{
							"name": "SelectPreviousName"
						},
						{
							"name": "SelectNewName"
						},
						{
							"name": "AllowUpdateName1"
						},
						{
							"name": "AllowUpdateName0"
						},
						{
							"name": "AllowUpdateCurrentName"
						},
						{
							"name": "FilterNEwRecord"
						},
						{
							"name": "SelectNewRecords"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CID as integer,",
						"          Name as string,",
						"          EmailID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Type3Data",
						"source(output(",
						"          CID as integer,",
						"          Name as string,",
						"          EmailID as string,",
						"          PreviousName_0 as string,",
						"          PreviousName_1 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DWType3",
						"Type3Data, DWType3 lookup(Type3Data@CID == DWType3@CID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(DWType3@CID, true),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(DWType3@CID)) ~> ExistingCustomer",
						"ExistingCustomer select(mapColumn(",
						"          CID = DWType3@CID,",
						"          PreviousName = DWType3@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCurrentName",
						"ExistingCustomer select(mapColumn(",
						"          CID = DWType3@CID,",
						"          PreviousName_1 = PreviousName_0",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPreviousName",
						"ExistingCustomer select(mapColumn(",
						"          CID = Type3Data@CID,",
						"          Name = Type3Data@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewName",
						"SelectPreviousName alterRow(updateIf(1==1)) ~> AllowUpdateName1",
						"SelectCurrentName alterRow(updateIf(1==1),",
						"     insertIf(1==1)) ~> AllowUpdateName0",
						"SelectNewName alterRow(updateIf(1==1)) ~> AllowUpdateCurrentName",
						"lookup1 filter(isNull(DWType3@CID)) ~> FilterNEwRecord",
						"FilterNEwRecord select(mapColumn(",
						"          CID = Type3Data@CID,",
						"          Name = Type3Data@Name,",
						"          EmailID = Type3Data@EmailID,",
						"          PreviousName_0,",
						"          PreviousName_1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNewRecords",
						"AllowUpdateName1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          EmailID as string,",
						"          PreviousName_0 as string,",
						"          PreviousName_1 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError') ~> UpdatePreviousName1",
						"AllowUpdateName0 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          EmailID as string,",
						"          PreviousName_0 as string,",
						"          PreviousName_1 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['CID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CID,",
						"          PreviousName_0 = PreviousName",
						"     )) ~> UpdatePreviousName0",
						"AllowUpdateCurrentName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          EmailID as string,",
						"          PreviousName_0 as string,",
						"          PreviousName_1 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     errorHandlingOption: 'stopOnFirstError') ~> UpdateCurrentName",
						"SelectNewRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CID as integer,",
						"          Name as string,",
						"          EmailID as string,",
						"          PreviousName_0 as string,",
						"          PreviousName_1 as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> InsertNewRecords"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "NewestFile",
								"type": "DatasetReference"
							},
							"name": "CSVSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Duplicate",
								"type": "DatasetReference"
							},
							"name": "Duplicate"
						},
						{
							"dataset": {
								"referenceName": "UniqueDS",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as short,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVSource",
						"CSVSource aggregate(groupBy(FirstName,",
						"          MiddleName,",
						"          LastName),",
						"     Count = count()) ~> aggregate1",
						"aggregate1 split(Count > 1,",
						"     disjoint: false) ~> split1@(Duplicate, Unique)",
						"CSVSource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Duplicate",
						"split1@Unique sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignement 8 Q 1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EvenCustomerIDDataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GetCustomerID 100 200",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerFile": {},
									"EvenCustomerID": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-28T06:30:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GetCustomerID 100 200')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Assignement 8 Q3Deduplication')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Deduplication",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVSource": {},
									"Duplicate": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow3')]"
			]
		}
	]
}